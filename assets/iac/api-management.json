{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminEmail": {
            "defaultValue": "me@domain.com",
            "metadata": {
                "description": "Email used for the administrator."
            },
            "type": "string"
        },
        "apiManagementInstanceName": {
            "defaultValue": "[concat('apim-hybrid-multi-cloud-', uniqueString(resourceGroup().name))]",
            "metadata": {
                "description": "Name of the API Management instance."
            },
            "type": "string"
        },
        "applicationInsightsName": {
            "defaultValue": "ai-hybrid-multi-cloud-strategy",
            "metadata": {
                "description": "Name of the Application Insights instance."
            },
            "type": "string"
        },
        "functionAppName": {
            "defaultValue": "[concat('func-hybrid-multi-cloud-', uniqueString(resourceGroup().name))]",
            "metadata": {
                "description": "Name of the Function App."
            },
            "type": "string"
        },
        "keyVaultName": {
            "defaultValue": "[concat('kv-', uniqueString(resourceGroup().name))]",
            "metadata": {
                "description": "Name of the Key Vault."
            },
            "type": "string"
        },
        "location": {
            "defaultValue": "West Europe",
            "metadata": {
                "description": "Location where we want to deploy the resource."
            },
            "type": "string"
        },
        "tags": {
            "defaultValue": {
                "LastModifiedDate": "[utcNow()]",
                "Project": "Creating a hybrid and multi-cloud strategy using Azure API Management",
                "Purpose": "Session"
            },
            "type": "object"
        },
        "virtualMachineName": {
            "defaultValue": "[concat('vm-', uniqueString(resourceGroup().name))]",
            "metadata": {
                "description": "Name of the Application Insights instance."
            },
            "type": "string"
        }
    },
    "variables": {
        "raiDemoApiName": "rai-demo",
        "raiDemoApiDisplayName": "RAI Demo",
        "createRegistrationOperationName": "create-registration",
        "healthProbeApiName": "health-probe",
        "healthProbeApiDisplayName": "Health Probe",
        "statusOperationName": "status",
        "testFunctionOperationName": "test-function"
    },
    "resources": [
        {
            "type": "Microsoft.ApiManagement/service",
            "apiVersion": "2019-01-01",
            "name": "[parameters('apiManagementInstanceName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "Developer",
                "capacity": 1
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "publisherEmail": "[parameters('adminEmail')]",
                "publisherName": "EPH"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('raiDemoApiName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "displayName": "[variables('raiDemoApiDisplayName')]",
                "apiRevision": "1",
                "subscriptionRequired": true,
                "serviceUrl": "https://httpbin.org/",
                "path": "[variables('raiDemoApiName')]",
                "protocols": [
                    "http",
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('healthProbeApiName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "displayName": "[variables('healthProbeApiDisplayName')]",
                "apiRevision": "1",
                "subscriptionRequired": false,
                "path": "[variables('healthProbeApiName')]",
                "protocols": [
                    "http",
                    "https"
                ],
                "isCurrent": true
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('raiDemoApiName'), '/', variables('createRegistrationOperationName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementInstanceName'), variables('raiDemoApiName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "displayName": "Create Registration",
                "method": "POST",
                "urlTemplate": "/registration",
                "templateParameters": [],
                "responses": [
                    {
                        "statusCode": 202,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('raiDemoApiName'), '/', variables('testFunctionOperationName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementInstanceName'), variables('raiDemoApiName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "displayName": "Retrieve Registration",
                "method": "GET",
                "urlTemplate": "/registrations",
                "templateParameters": [],
                "request": {
                    "queryParameters": [
                        {
                            "name": "id",
                            "type": "string",
                            "required": true,
                            "values": []
                        }
                    ],
                    "headers": [],
                    "representations": []
                },
                "responses": []
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('healthProbeApiName'), '/', variables('statusOperationName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementInstanceName'), variables('healthProbeApiName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "displayName": "Status",
                "method": "GET",
                "urlTemplate": "[concat('/', variables('statusOperationName'))]",
                "templateParameters": [],
                "responses": [
                    {
                        "statusCode": 200,
                        "representations": [],
                        "headers": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/loggers",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', parameters('applicationInsightsName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "loggerType": "applicationInsights",
                "credentials": {
                    "instrumentationKey": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
                },
                "resourceId": "[resourceId('microsoft.insights/components', parameters('applicationInsightsName'))]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/diagnostics",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/applicationinsights')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]",
                "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apiManagementInstanceName'), parameters('applicationInsightsName'))]"
            ],
            "properties": {
                "alwaysLog": "allErrors",
                "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('apiManagementInstanceName'), parameters('applicationInsightsName'))]",
                "sampling": {
                    "samplingType": "fixed",
                    "percentage": 100
                }
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('raiDemoApiName'), '/', variables('createRegistrationOperationName'), '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apiManagementInstanceName'), variables('raiDemoApiName'), variables('createRegistrationOperationName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementInstanceName'), variables('raiDemoApiName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "value": "[concat('<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <base />\r\n    <mock-response status-code=\"202\" content-type=\"application/json\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>')]",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('raiDemoApiName'), '/', variables('testFunctionOperationName'), '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apiManagementInstanceName'), variables('raiDemoApiName'), variables('testFunctionOperationName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementInstanceName'), variables('raiDemoApiName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "value": "[concat('<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <base />\r\n    <choose>\r\n      <when condition=\"@(context.Request.Headers.GetValueOrDefault(&quot;Host&quot;, &quot;UNKNOWN&quot;).Equals(&quot;', parameters('virtualMachineName'), '.', parameters('location'), '.cloudapp.azure.com&quot;))\">\r\n        <!-- Set backend to Docker container -->\r\n        <set-backend-service base-url=\"http://RetrieveRegistrationFunction\" />\r\n      </when>\r\n      <otherwise>\r\n        <!-- Set backend to Azure Function -->\r\n        <set-backend-service base-url=\"https://', parameters('functionAppName') , '.azurewebsites.net\" />\r\n        <!-- Retrieve Function Key from Key Vault -->\r\n        <send-request ignore-error=\"false\" timeout=\"20\" response-variable-name=\"passwordResponse\" mode=\"new\">\r\n          <set-url>https://', parameters('keyVaultName'), '.vault.azure.net/secrets/', parameters('functionAppName'), '-function-key/?api-version=7.0</set-url>\r\n          <set-method>GET</set-method>\r\n          <authentication-managed-identity resource=\"https://vault.azure.net\" />\r\n        </send-request>\r\n        <!-- Set Function Key -->\r\n        <set-header name=\"x-functions-key\" exists-action=\"override\">\r\n          <value>@{ var secret = ((IResponse)context.Variables[\"passwordResponse\"]).Body.As&lt;JObject&gt;(); return secret[\"value\"].ToString(); }</value>\r\n        </set-header>\r\n      </otherwise>\r\n    </choose>\r\n    <!-- Set uri for either -->\r\n    <rewrite-uri template=\"/api/RetrieveRegistration\" copy-unmatched-params=\"true\" />\r\n    <!-- Apply additional policies -->\r\n    <rate-limit-by-key calls=\"10\" renewal-period=\"60\" counter-key=\"@(context.Request.IpAddress)\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>')]",
                "format": "xml"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis/operations/policies",
            "apiVersion": "2019-01-01",
            "name": "[concat(parameters('apiManagementInstanceName'), '/', variables('healthProbeApiName'), '/', variables('statusOperationName'), '/policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.ApiManagement/service/apis/operations', parameters('apiManagementInstanceName'), variables('healthProbeApiName'), variables('statusOperationName'))]",
                "[resourceId('Microsoft.ApiManagement/service/apis', parameters('apiManagementInstanceName'), variables('healthProbeApiName'))]",
                "[resourceId('Microsoft.ApiManagement/service', parameters('apiManagementInstanceName'))]"
            ],
            "properties": {
                "value": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <base />\r\n    <mock-response status-code=\"200\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>",
                "format": "xml"
            }
        }
    ]
}